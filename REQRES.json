{
	"info": {
		"_postman_id": "ef0bb496-5020-4049-9c5b-4f7b13478843",
		"name": "REQRES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19435219"
	},
	"item": [
		{
			"name": "listusers_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify Email in the 'data' array is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"  responseData.data.forEach(function(user) {\r",
							"    pm.expect(user.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify object has the correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.support).to.be.an('object');\r",
							"    pm.expect(responseData.support).to.have.property('url').that.is.a('string');\r",
							"    pm.expect(responseData.support).to.have.property('text').that.is.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users?page=2test??#$",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2test??"
						}
					],
					"hash": "$"
				},
				"description": "This API endpoint sends an HTTP GET request to retrieve a list of users from the page. The request should include the 'page' parameter to indicate the page number for which the users are to be fetched.\n\n### Request\n\n- Method: GET\n- URL: [https://reqres.in/api/users?page=2](https://reqres.in/api/users?page=2)\n    \n\n### Critical Test Scenarios:\n\n1. Positive Test Scenario\n    \n\n**Response**\n\nThe response to the request returns a status code of 200, indicating a successful retrieval of user data."
			},
			"response": []
		},
		{
			"name": "listunknown_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Verify the response is an object that includes page, per_page, total, total_pages, data, and support properties\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify each element in the data array has id, name, year, color, and pantone_value properties\", function () {\r",
							"    pm.response.json().data.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an('object').that.has.all.keys('id', 'name', 'year', 'color', 'pantone_value');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify Id in the data array is a non-negative integer\", function () {\r",
							"    let myData = pm.response.json();\r",
							"    \r",
							"    pm.expect(myData.data).to.be.an('array');\r",
							"    myData.data.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/unknown",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "singlelist_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that the response contains object with expected details page, per_page, total, total_pages, data, and support properties\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('data', 'support');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the object contains all the expected properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.have.property('id');\r",
							"    pm.expect(responseData.data).to.have.property('name');\r",
							"    pm.expect(responseData.data).to.have.property('year');\r",
							"    pm.expect(responseData.data).to.have.property('color');\r",
							"    pm.expect(responseData.data).to.have.property('pantone_value');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://reqres.in/API/unknown/2",
					"protocol": "http",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"API",
						"unknown",
						"2"
					]
				},
				"description": "This endpoint makes an HTTP **GET** request to retrieve information from the reqres.in API. The response will include data such as ID, name, year, color, and pantone_value, as well as support information including URL and text.\n\nIt is a positive test scenerio"
			},
			"response": []
		},
		{
			"name": "delete_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that the response body is null or empty\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the user with ID 2 is deleted from the system\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response does not contain sensitive information\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				},
				"description": "This HTTP DELETE request is used to delete a user with the ID 2 from the API. The request will contain a request body. Upon successful deletion, the API returns a status code of 204 with no response body.\n\n### Critical Test Scenarios:\n\n1. **Positive Test Scenario**"
			},
			"response": []
		},
		{
			"name": "CreateUser_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify status code is 201 created\", function () {\r",
							"pm.globals.get(\"variable_key\");\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Verify response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Verify user name should be: \\\"string\\\"\", function () {\r",
							"\r",
							"    pm.expect(jsonData.name).to.eql(\"zainab\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n    \"name\":\"zainab\", \r\n    \"job\":\"gateman\"\r\n\r\n\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Verify that response contains expected objects\", function () {\r",
							"    let responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object').that.has.all.keys('name', 'job', 'updatedAt');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that name is a not an empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that Job is not an empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n    \"name\":\"zainab\", \r\n    \"job\":\"Gateman\"\r\n\r\n\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUsername_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Verify that response contains expected objects\", function () {\r",
							"    let responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object').that.has.all.keys('name', 'job', 'updatedAt');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that name is a not an empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that Job is not an empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Verify that response is an object with id property\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('id');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify that ID is not a negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that Token is not an empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \" \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delay_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify Email in the 'data' array is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"  responseData.data.forEach(function(user) {\r",
							"    pm.expect(user.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify object has the correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.support).to.be.an('object');\r",
							"    pm.expect(responseData.support).to.have.property('url').that.is.a('string');\r",
							"    pm.expect(responseData.support).to.have.property('text').that.is.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users?delay=3",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login_001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that response is an object with a token property\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('token');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that Token is not an empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/login",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"login"
					]
				},
				"description": "This endpoint allows users to log in by sending a POST request to the URL. The request should include the user's email and password in the request body. Upon successful execution, the response will include a token.\n\n### Critical Test Scenarios:\n\n1. Positive Test Scenario\n    \n\n### Request Body\n\n- email :\n    \n- password\n    \n\n### Response\n\n- A token which is generated upon successful login."
			},
			"response": []
		}
	]
}